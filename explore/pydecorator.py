# AUTOGENERATED! DO NOT EDIT! File to edit: 01_pydecorator.ipynb (unless otherwise specified).

__all__ = ['hello', 'wrapper', 'timer', 'waste_time', 'get_params', 'trace', 'greet', 'random_greet', 'greet_many',
           'GREETINGS', 'register', 'true_or_false', 'reversed', 'robber_language', 'REGISTERED']

# Cell
import functools
import logging
import random
import time
from collections import defaultdict

# Cell
# Function as a parameter
def hello(name, logger):
    logger(f"Hello {name}")

hello("world", logger=print)

# Cell
def wrapper(func):
    @functools.wraps(func)
    def _wrapper(*args, **kwargs):
        # Before func
        value = func(*args, **kwargs)
        # After func
        return value
    return _wrapper

# Cell
def timer(func):
    @functools.wraps(func)
    def _timer(*args, **kwargs):
        tic = time.perf_counter()
        value = func(*args, **kwargs)
        toc = time.perf_counter()
        print(f"Elapsed time: {toc-tic:.2f} seconds")
        return value
    return _timer


@timer
def waste_time(number):
    total = 0
    for num in range(number):
        total += sum(n for n in range(num))
    return total

# Cell

def get_params(*args, **kwargs):
    ars = [repr(a) for a in args]
    kws = [f"{k}={repr(v)}" for k,v in kwargs.items()]
    return ', '.join(ars + kws)

def trace(func):
    """Show the trace of function calls"""
    name = func.__name__
    @functools.wraps(func)
    def _trace(*args, **kwargs):
        print(f"Calling {name}({get_params(*args,**kwargs)})")
        value = func(*args, **kwargs)
        print(f"{name} returned {value}")
        return value
    return _trace

GREETINGS = ["ABC", "EHLLO", "NO!!!"]

@trace
def greet(name, greeting="Hello"):
    return f"{greeting} {name}"


@trace
@timer
def random_greet(name="Emily"):
    greeting = random.choice(GREETINGS)
    return greet(name, greeting=greeting)

@trace
def greet_many(number):
    return [random_greet() for _ in range(number)]


# Cell
REGISTERED = {}

def register(func):
    name = func.__name__
    if name not in REGISTERED: REGISTERED[name] = func
    return func

@register
def true_or_false(text):
    tf_values = {
        True: {"true", "on", "yes", "1"},
        False: {"false", "off", "no", "0"}
    }
    for tf, values in tf_values.items():
        if text.lower() in values:
            return tf

@register
def reversed(text):
    return text[::-1].capitalize()

@register
def robber_language(text):
    consonants = "bcdfghlmnpqrstvwxyz"
    return "".join(
        f"{c}o{c.lower()}" if c.lower() in consonants else c
        for c in text
    )

# text = input("Please input a text:")

# while True:
#     print(f"Parsers: {', '.join(REGISTERED)}")
#     parser = input("Choose a parser: ")
#     if parser in REGISTERED: break


# parser_func = REGISTERED[parser]
# print(parser_func(text))
# parser, text, REGISTERED[parser]